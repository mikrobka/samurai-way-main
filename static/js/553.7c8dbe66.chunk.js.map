{"version":3,"file":"static/js/553.7c8dbe66.chunk.js","mappings":"6LACA,G,QAA0B,0BAA1B,EAA4D,wBAA5D,EAAmG,8BAAnG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCUpMA,EAAa,SAACC,GAEvB,OACI,gBAAKC,UAAWC,EAAW,GAAKA,EAAhC,UACI,SAAC,KAAD,CAASC,GAAE,oBAAeH,EAAMI,IAAhC,SAAuCJ,EAAMK,UCP5CC,EAAU,SAACN,GACpB,OACI,0BACI,gBAAKC,UAAWC,EAAhB,SAA4CF,EAAMO,SAAlBP,EAAMQ,Q,uCCF5CC,GAAeC,EAAAA,EAAAA,GAAU,KAkBlBC,GAAkBC,EAAAA,EAAAA,GAA2B,CACtDC,KAAK,WADsBD,EAjBiC,SAACZ,GAE7D,OACI,+BACI,kBAAMc,SAAUd,EAAMe,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,YAAa,qBAAsBZ,KAAM,UAAWa,UAAWC,EAAAA,EAAUC,SAAU,CAACC,EAAAA,EAAcZ,QAE7G,0BACI,+CCWnB,GAAea,E,QAAAA,KAA6BC,EAAAA,EAAAA,KANpB,SAACC,GACtB,MAAO,CACHC,YAAYD,EAAMC,eAI2C,CAACC,WAAAA,EAAAA,IAAaC,EAAAA,EAAlF,ECpBsB,SAAC3B,GAOpB,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKF,EAAMyB,YAAYG,YAAYC,KAAI,SAACC,GAAD,OAAQ,SAAC/B,EAAD,CAAYK,GAAI0B,EAAE1B,GAAIC,KAAMyB,EAAEzB,aAE7E,gBAAKJ,UAAWC,EAAhB,SACKF,EAAMyB,YAAYM,aAAaF,KAAI,SAACG,GAAD,OAAQ,SAAC1B,EAAD,CAAoBC,QAASyB,EAAEzB,SAAjByB,EAAE5B,UAGhE,SAACO,EAAD,CAAiBG,SAbH,SAACP,GACnBP,EAAM0B,WAAWnB,EAAQA,mB,6ECbjC,EAAgF,kCAAhF,EAA0H,4B,4BCE7GY,EAAW,SAAC,GAAkC,IAAjCc,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAASlC,GAAgB,YAChDmC,EAAQD,EAAKE,SAAWF,EAAKC,MACnC,OACI,iBAAKlC,UAAS,UAAKC,EAAL,YAAsBiC,GAASjC,GAA7C,WACI,0BACI,uCAAc+B,GAAWjC,MAE5BkC,EAAKC,OAASD,EAAKE,UAAW,0BAAOF,EAAKC,a,iICAjDE,EAAkB,SAACb,GACrB,MAAO,CACHc,OAAQd,EAAMe,KAAKD,SAIpB,SAASX,EAAoBa,GAahC,OADiCjB,EAAAA,EAAAA,IAAQc,EAARd,EAVP,SAACvB,GAEvB,IAAKsC,EAAwBtC,EAAxBsC,OAAWG,GAAhB,OAA6BzC,EAA7B,GAEA,OAAKsC,GAGE,SAACE,GAAD,UAAeC,KAFX,SAAC,KAAD,CAAUtC,GAAI,gB,4ECvB1B,IAAMkB,EAAgB,SAACqB,GAC1B,OAAIA,OACA,EAEM,GAAN,OAAUA,EAAV,cAIKhC,EAAY,SAACiC,GACtB,OAAO,SAACD,GACJ,OAAIA,GAASA,EAAME,OAASD,OACxB,EAEM,cAAN,OAAqBA,EAArB","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogForm/DialogForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormControls.module.css?2a3b","components/common/FormsControls/FormControls.tsx","hoc/withAuthRedirect.tsx","utils/validation/validator.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialog\":\"Dialogs_dialog__htSTl\",\"dialogsItems\":\"Dialogs_dialogsItems__zeEWD\",\"active\":\"Dialogs_active__t8cjl\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\"};","import s from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\nimport React from \"react\";\n\n\n\ntype DialogsPropsType = {\n    id:number\n    name:string\n}\n\nexport const DialogItem = (props:DialogsPropsType) => {\n\n    return (\n        <div className={s.dialog + '' + s.active}>\n            <NavLink to={`/messages/${props.id}`}>{props.name}</NavLink>\n        </div>\n    )\n}","import s from \"../Dialogs.module.css\";\nimport React from \"react\";\n\ntype MessagePropsType = {\n    key:number\n    message:string\n}\n\nexport const Message = (props: MessagePropsType) => {\n    return (\n        <div>\n            <div className={s.message} key={props.key}>{props.message}</div>\n        </div>\n    )\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\nimport {maxLength, requiredField} from \"../../../utils/validation/validator\";\n\nexport type MessageFormType = {\n    message:string\n}\n\nconst maxLength100 = maxLength(100)\nconst DialogForm:React.FC<InjectedFormProps<MessageFormType>> = (props) => {\n\n    return (\n        <>\n            <form onSubmit={props.handleSubmit} >\n                <div>\n                    <Field placeholder={'Enter your message'} name={'message'} component={Textarea} validate={[requiredField,maxLength100]}/>\n                </div>\n                <div>\n                    <button>Send</button>\n                </div>\n            </form>\n        </>\n    );\n};\n\n\nexport const DialogReduxForm = reduxForm<MessageFormType>({\n    form:'message'\n})(DialogForm)\n","import React from \"react\";\nimport {\n    addMessage,\n    InitialStateType,\n} from \"../../redux/dialogReduсer\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {Dialogs} from \"./Dialogs\";\nimport {compose} from \"redux\";\n\n\n\n\ntype mapStatePropsType = { // типизируем данные в контейнере\n    dialogsPage:InitialStateType\n}\n\ntype MapDispatchPropsType = { // типизируем функции в контейнере\n    addMessage:(message:string)=>void\n}\n\nexport type DialogsPropsType = mapStatePropsType & MapDispatchPropsType // делаем общий тип\n\n const mapStateToProps = (state:AppStateType):mapStatePropsType => {\n    return {\n        dialogsPage:state.dialogsPage, // получаем данные из сейта\n    }\n }\n\n export default compose<React.ComponentType>(connect(mapStateToProps,{addMessage}),withAuthRedirect)(Dialogs)\n","import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {DialogReduxForm, MessageFormType} from \"./DialogForm/DialogForm\";\n\n\n\n\nexport const Dialogs = (props: DialogsPropsType) => {\n\n\n    const addNewMessage = (message:MessageFormType) => {\n        props.addMessage(message.message)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {props.dialogsPage.dialogsData.map((d) => (<DialogItem id={d.id} name={d.name}/>))}\n            </div>\n            <div className={s.messages}>\n                {props.dialogsPage.messagesData.map((m) => (<Message key={m.id} message={m.message}/>))}\n            </div>\n\n            <DialogReduxForm onSubmit={addNewMessage}/>\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"form-control\":\"FormControls_form-control__ilnr2\",\"formControl\":\"FormControls_formControl__1L7zq\",\"error\":\"FormControls_error__aTANB\",\"formSummaryError\":\"FormControls_formSummaryError__12VA3\"};","import s from './FormControls.module.css'\n\n\nexport const Textarea = ({input, meta, ...props}: any) => {\n    const error = meta.touched && meta.error;\n    return (\n        <div className={`${s.formControl} ${error && s.error}`}>\n            <div>\n                <textarea {...input} {...props} />\n            </div>\n            {meta.error && meta.touched && <span>{meta.error}</span>}\n        </div>\n    );\n};\n\n\nexport const Input = ({input, meta, ...props}: any) => {\n    const error = meta.touched && meta.error;\n    return (\n        <div className={`${s.formControl} ${error && s.error}`}>\n            <div>\n                <input {...input} {...props} />\n            </div>\n            {meta.error && meta.touched && <span>{meta.error}</span>}\n        </div>\n    );\n};\n","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\n\nexport type MapStatePropsType = {\n    isAuth: boolean\n}\n\n\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) { // создаем хок типизируем как компоненета которая примнимает своей тип тип который передается вместе с компонентой\n\n    const RedirectComponent = (props: MapStatePropsType) => {\n\n        let {isAuth, ...restProps} = props // деструктуризауия пропсов чтоб не отдавать isAuth\n\n        if (!isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return <Component {...restProps as T}/> // возвращаем компоненту с пришедшими пропсами\n    }\n\n    let ConnectedRedirectComponent = connect(MapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n\n}","export const requiredField = (value: string) => {\n    if (value) {\n        return undefined\n    } else {\n        return `${value} is wrong`\n    }\n}\n\nexport const maxLength = (size: number ) => {\n    return (value: string) => {\n        if (value && value.length < size) {\n            return undefined\n        } else {\n            return `Max length ${size} symbol`\n        }\n    }\n}\n"],"names":["DialogItem","props","className","s","to","id","name","Message","message","key","maxLength100","maxLength","DialogReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","requiredField","compose","connect","state","dialogsPage","addMessage","withAuthRedirect","dialogsData","map","d","messagesData","m","input","meta","error","touched","MapStateToProps","isAuth","auth","Component","restProps","value","size","length"],"sourceRoot":""}