{"version":3,"file":"static/js/59.3df23d5d.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.css","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css?c3a9","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/PostsForm/PostsForm.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormControls.module.css?2a3b","components/common/FormsControls/FormControls.tsx","hoc/withAuthRedirect.tsx","utils/validation/validator.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"discriptionBlock\":\"ProfileInfo_discriptionBlock__FLO8i\"};","// extracted by mini-css-extract-plugin\nexport default {\"status_wrapper\":\"ProfileStatus_status_wrapper__bqGgu\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\nimport s from './ProfileStatus.module.css';\n\ntype ProfileStatusPropsType = {\n    status: string;\n    updateStatus: (status: string) => void;\n};\n\nexport const ProfileStatus: FC<ProfileStatusPropsType> = (props) => {\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [status, setStatus] = useState<string>(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    };\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    };\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    };\n\n    return (\n        <li className={s.status_wrapper}>\n            {editMode ? (\n                <input\n                    onChange={onStatusChange}\n                    autoFocus\n                    onBlur={deactivateEditMode}\n                    value={status}\n                ></input>\n            ) : (\n                <span placeholder=\"status\" onDoubleClick={activateEditMode}>\n          {props.status}\n        </span>\n            )}\n        </li>\n    );\n};\n","import React from 'react';\nimport s from './ProfileInfo.module.css'\nimport {ProfileType} from \"../../../redux/profileReducer\";\nimport {Preloader} from \"../../common/Preloader/Preloader\";\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\n\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\n\n    console.log(props.profile)\n    const withOutAvatar = 'https://static.prinseps.com/media/uploads/cryptopunk6278.png';\n\n    if (!props.profile) { // если не пришел профайл показываем прелоадер\n        return <Preloader/>\n    } else {\n        return (\n            <div>\n                <div className={s.discriptionBlock}>\n                    <picture>\n                        <img src={props.profile.photos.large ? props.profile.photos.large : withOutAvatar}\n                             alt={props.profile.fullName}/>\n                    </picture>\n                    <div>{props.profile.fullName}</div>\n                    <ProfileStatus status={props.profile.aboutMe} updateStatus={props.updateStatus}/>\n                    ava+discription\n                </div>\n            </div>\n        );\n    }\n\n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"posts_form\":\"MyPosts_posts_form__fNS2O\",\"posts\":\"MyPosts_posts__GSiZ2\",\"error\":\"MyPosts_error__zuzRW\",\"errorMessage\":\"MyPosts_errorMessage__ErfHe\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__wW6-Y\"};","\nimport React from \"react\";\nimport s from \"./Post.module.css\"\n\ntype PostPropsType = {\n    message:string\n    like:number\n}\n\n\nexport function Post(props:PostPropsType) {\n    return (\n        <li className={s.post}>\n            <img src={'ava'} alt={'id'} />\n            <div>\n                <p>{'text'}</p>\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Ei-like.svg/1200px-Ei-like.svg.png\" />\n                <span>{'likes'}</span>\n                <button >\n                    <svg xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 48 48\" width=\"48px\" height=\"48px\"><path d=\"M 39.486328 6.9785156 A 1.50015 1.50015 0 0 0 38.439453 7.4394531 L 24 21.878906 L 9.5605469 7.4394531 A 1.50015 1.50015 0 0 0 8.484375 6.984375 A 1.50015 1.50015 0 0 0 7.4394531 9.5605469 L 21.878906 24 L 7.4394531 38.439453 A 1.50015 1.50015 0 1 0 9.5605469 40.560547 L 24 26.121094 L 38.439453 40.560547 A 1.50015 1.50015 0 1 0 40.560547 38.439453 L 26.121094 24 L 40.560547 9.5605469 A 1.50015 1.50015 0 0 0 39.486328 6.9785156 z\"/></svg>\n                </button>\n            </div>\n\n        </li>\n    );\n\n\n}","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, requiredField} from \"../../../../utils/validation/validator\";\nimport {Textarea} from \"../../../common/FormsControls/FormControls\";\n\nexport type AddPostFormType = {\n    post:string\n}\n\n\nconst lengthValidator = maxLength(10)\n\nconst PostForm:React.FC<InjectedFormProps<AddPostFormType>> = (props) => {\n    return (\n        <>\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    <Field placeholder={\"Enter your new post\"} name={'post'} component={Textarea} validate={[requiredField,lengthValidator]}/>\n                </div>\n                <div>\n                    <button>Add</button>\n                </div>\n            </form>\n        </>\n    );\n};\n\nexport  const ReduxPostForm = reduxForm<AddPostFormType>({\n    form:'post'\n})(PostForm)","import React from \"react\";\nimport {\n    addPost,\n    InitialStateType,\n} from \"../../../redux/profileReducer\";\n\nimport {connect} from \"react-redux\";\nimport {MyPosts} from \"./MyPosts\";\nimport {AppStateType} from \"../../../redux/store\";\n\n\n\n\ntype mapStatePropsType = {\n    postsPage:InitialStateType\n}\n\ntype MapDispatchPropsType = {\n    addPost:(newPostText:string) => void\n\n}\n\nexport type PostsPropsType = mapStatePropsType & MapDispatchPropsType\n\nconst mapStateToProps = (state:AppStateType):mapStatePropsType => {\n    return {\n        postsPage:state.profilePage\n    }\n}\nexport const MyPostsContainer = connect(mapStateToProps,{addPost})(MyPosts)","import React, {memo} from \"react\";\nimport s from \"./MyPosts.module.css\"\nimport {Post} from \"./Post/Post\";\nimport {PostsPropsType} from \"./MyPostsContainer\";\nimport {AddPostFormType, ReduxPostForm} from \"./PostsForm/PostsForm\";\n\n\nexport const MyPosts = (props: PostsPropsType) => {\n    console.log(\"Render\")\n    const postsElements = props.postsPage.postsData.map(p => <Post key={p.id} message={p.postMessage} like={p.likesCount}/>)\n\n    const addPost = (postMessage: AddPostFormType) => {\n        props.addPost(postMessage.post)\n\n    }\n\n    return (\n        < >\n            <div className={s.posts_form}>\n                <h3>My posts</h3>\n                <div>\n                    <ReduxPostForm onSubmit={addPost}/>\n                </div>\n            </div>\n            <ul className={s.posts}>\n                {postsElements}\n            </ul>\n\n        </>\n\n    );\n}","import React from \"react\";\nimport s from \"./Profile.module.css\"\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from \"../../redux/profileReducer\";\n\ntype ProfilePropsType = {\n    profile:ProfileType\n    status:string\n    updateStatus:(status:string)=>void\n}\n\n\nexport const Profile:React.FC<ProfilePropsType> = (props) => {\n    debugger\n    return (\n        <div className={s.content}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n\n    );\n}","import React from \"react\";\nimport {Profile} from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {getProfile, getStatus, ProfileType, updateStatus} from \"../../redux/profileReducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\ntype PathParamsType = {\n    userId: string\n}\n\n\ntype MapStateToProps = {\n    profile: ProfileType\n    status: string\n    id: any\n}\n\ntype MapDispatchToProps = {\n    getProfile: (id: string) => void\n    getStatus: (id: string) => void\n    updateStatus: (status: string) => void\n}\nexport type ProfilePropsType = MapStateToProps & MapDispatchToProps\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\n\n\nexport class ProfileClassComponent extends React.Component<PropsType> {\n    componentDidMount() {\n        let id = this.props.match.params.userId\n        if (!id) {\n            id = this.props.id\n            if (!id) {\n                debugger\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.getProfile(id)\n        this.props.getStatus(id)\n    }\n\n    render() {\n\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n                     updateStatus={this.props.updateStatus}/>\n        );\n    }\n\n}\n\n\nconst MapStateToProps = (state: AppStateType): MapStateToProps => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        id: state.profilePage.profile.userId\n    }\n}\n\nexport default compose<React.ComponentType>(connect(MapStateToProps, {\n    getProfile,\n    updateStatus,\n    getStatus\n}), withRouter, withAuthRedirect,)(ProfileClassComponent)","// extracted by mini-css-extract-plugin\nexport default {\"form-control\":\"FormControls_form-control__ilnr2\",\"formControl\":\"FormControls_formControl__1L7zq\",\"error\":\"FormControls_error__aTANB\",\"formSummaryError\":\"FormControls_formSummaryError__12VA3\"};","import s from './FormControls.module.css'\n\n\nexport const Textarea = ({input, meta, ...props}: any) => {\n    const error = meta.touched && meta.error;\n    return (\n        <div className={`${s.formControl} ${error && s.error}`}>\n            <div>\n                <textarea {...input} {...props} />\n            </div>\n            {meta.error && meta.touched && <span>{meta.error}</span>}\n        </div>\n    );\n};\n\n\nexport const Input = ({input, meta, ...props}: any) => {\n    const error = meta.touched && meta.error;\n    return (\n        <div className={`${s.formControl} ${error && s.error}`}>\n            <div>\n                <input {...input} {...props} />\n            </div>\n            {meta.error && meta.touched && <span>{meta.error}</span>}\n        </div>\n    );\n};\n","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\n\nexport type MapStatePropsType = {\n    isAuth: boolean\n}\n\n\nconst MapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) { // создаем хок типизируем как компоненета которая примнимает своей тип тип который передается вместе с компонентой\n\n    const RedirectComponent = (props: MapStatePropsType) => {\n\n        let {isAuth, ...restProps} = props // деструктуризауия пропсов чтоб не отдавать isAuth\n\n        if (!isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return <Component {...restProps as T}/> // возвращаем компоненту с пришедшими пропсами\n    }\n\n    let ConnectedRedirectComponent = connect(MapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n\n}","export const requiredField = (value: string) => {\n    if (value) {\n        return undefined\n    } else {\n        return `${value} is wrong`\n    }\n}\n\nexport const maxLength = (size: number ) => {\n    return (value: string) => {\n        if (value && value.length < size) {\n            return undefined\n        } else {\n            return `Max length ${size} symbol`\n        }\n    }\n}\n"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","placeholder","onDoubleClick","ProfileInfo","console","log","profile","src","photos","large","alt","fullName","aboutMe","Preloader","Post","xmlns","viewBox","width","height","d","lengthValidator","maxLength","ReduxPostForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","requiredField","MyPostsContainer","connect","state","postsPage","profilePage","addPost","postsElements","postsData","map","p","message","postMessage","like","likesCount","id","post","Profile","ProfileClassComponent","this","match","params","userId","history","push","getProfile","getStatus","React","compose","withRouter","withAuthRedirect","input","meta","error","touched","MapStateToProps","isAuth","auth","Component","restProps","to","size","length"],"sourceRoot":""}